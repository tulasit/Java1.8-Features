Why use Lambda Expression


"To provide the implementation of Functional interface.
Less coding."
 
  Java Lambda Expression Syntax

      a.)(argument-list) -> {body}  
      
Java lambda expression is consisted of three components.

1) Argument-list: It can be empty or non-empty as well.

2) Arrow-token: It is used to link arguments-list and body of expression.

3) Body: It contains expressions and statements for lambda expression.

** Why I got error in this codition:
 
   D:\Java Practice\Java1.8 Lambda Experssion>javac TestDemo.java
            TestDemo.java:10: error: incompatible types: TestDemo is not a functional interface
                TestDemo t=()->{System.out.println("TestDemo");};
                   ^
1 error

class TestDemo
{
   void testDemo()
   {
     
	 System.out.println("testDemo");
   }
   public static void main(String args[])
   {  
        TestDemo t=()->{System.out.println("TestDemo");};

		t.testDemo();
   }
}
@***** so lambdaexpression needs only  functional interface 

------If lambda expression with functional interface with out parameter

  interface ITestDemo
{
	public void demo();
}
class TestDemo
{
   
   public static void main(String args[])
   {  
        ITestDemo t=()->{System.out.println("Hello  Lambda Expression needs functional interface");};

		t.demo();
   }
}


******** Lambda Expression with parameter

    interface TestDemo{
  public String say(String name);
}
class Ltt
{
   public static void main(String args[])
   {
       TestDemo t=tulasi->{ return "Hello,"+tulasi; };
	     System.out.println(t.say("Tulasi"));
   }
   
}
   **  method parameter can change at lambada expersion  but while using lambda expression you use argument name  as  same as argument statement





  Java Lambda Expression Example: Multiple Parameters
  
  interface Addable{  
    int add(int a,int b);  
}  
public class LambdaExpresswithoutparameter
{
	
	 public static void main(String args[])
	 { 

             	// Addable ad=(a,b)->{return a+b;};
				 //System.out.println(ad.add(10,20));
				   // OR
		         Addable ad1=(a,b)->(a+b);  
                System.out.println(ad1.add(10,20));  
		 
	 }
}
  
   

Java Lambda Expression Example: with or without return keyword

interface addable
{  
   String printName(String name);
   
}
public class LambdaReturnExample
{
  public static void main(String args[])
  {
       addable printname=(name)->(name);//If it is single parameter no need return statement
	   System.out.println(printname.printName("TulasiThota"));
  
  }

}


::::::Java Lambda Expression Example: Foreach Loop

import java.util.*;
public class ForEachwithLambda
{
    public static void main(String args[])
	{
	    List<String> l= new ArrayList<String>();
		            l.add("tulasi");
					l.add("thota");
					l.add("I am happy");
					l.add("I also haungry for the job");
					
	
		  l.forEach((n)->System.out.println(n));  
		
	}
}





